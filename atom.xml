<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gyafen.github.io</id>
    <title>TAOTE的个人博客</title>
    <updated>2024-03-10T04:22:51.036Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gyafen.github.io"/>
    <link rel="self" href="https://gyafen.github.io/atom.xml"/>
    <subtitle>直到天主垂允为人类揭示未来图景的那一天到来之前，人类的全部智慧就包含在这五个字里面：等待和希望！</subtitle>
    <logo>https://gyafen.github.io/images/avatar.png</logo>
    <icon>https://gyafen.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, TAOTE的个人博客</rights>
    <entry>
        <title type="html"><![CDATA[解决visual studio code远程连接Linux每次都需要输入密码的问题]]></title>
        <id>https://gyafen.github.io/post/jie-jue-visual-studio-code-yuan-cheng-lian-jie-linux-mei-ci-du-xu-yao-shu-ru-mi-ma-de-wen-ti/</id>
        <link href="https://gyafen.github.io/post/jie-jue-visual-studio-code-yuan-cheng-lian-jie-linux-mei-ci-du-xu-yao-shu-ru-mi-ma-de-wen-ti/">
        </link>
        <updated>2024-03-10T04:18:47.000Z</updated>
        <content type="html"><![CDATA[<p>首先在本地运行命令：</p>
<pre><code class="language-shell">$ ssh-keygen -t rsa -b 4096
</code></pre>
<p>一路回车，终端会提示你生成了一个名为<code>id_rsa.pub</code>的文件：</p>
<figure data-type="image" tabindex="1"><img src="https://gyafen.github.io/post-images/1710044386198.jpg" alt="" loading="lazy"></figure>
<p>在Linux端创建文件夹<code>~/.ssh/</code>，然后将本地生成的id_rsa.pub文件上传至Linux端，保存至<code>~/.ssh/</code>文件夹，在<code>~/.ssh/</code>文件夹下打开终端，运行命令：</p>
<pre><code class="language-shell">$ cat id_rsa.pub &gt;&gt; authorized_keys
</code></pre>
<p>再次在本地vs code中连接这台Linux，就无须输入密码了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[cmake教程]]></title>
        <id>https://gyafen.github.io/post/cmake-jiao-cheng/</id>
        <link href="https://gyafen.github.io/post/cmake-jiao-cheng/">
        </link>
        <updated>2024-03-03T13:33:53.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-何为cmake">1、何为cmake？</h1>
<p>cmkae是用于管理源代码构建的工具，主要用于C语言和C++语言。cmake可以<strong>自动生成makefile文件</strong>，用户只需要执行make命令即可完成源代码的编译，无需再手写makefile。</p>
<h1 id="2-一个例子">2、一个例子</h1>
<p>首先建立一个空白文件夹，在该文件夹下面创建<code>main.cpp</code>，内容如下：</p>
<pre><code class="language-C++">#include &lt;iostream&gt;

using namespace std;

int main(){
    cout &lt;&lt; &quot;hello world!&quot; &lt;&lt; endl;
    return 0;
}
</code></pre>
<p>添加<code>CMakeLists.txt</code>，内容如下：</p>
<pre><code class="language-shell"># 指定使用的 cmake 的最低版本
cmake_minimum_required(VERSION 3.0)

# 定义工程名称，并可指定工程的版本、工程描述、web主页地址、支持的语言（默认情况支持所有语言）
# 如果不需要这些都是可以忽略的，只需要指定出工程名字即可。
project(MOON)

# 定义工程会生成一个可执行程序
# 这里的可执行程序名和project中的项目名没有任何关系
# 源文件名可以是一个也可以是多个，如有多个可用空格或;间隔
add_executable(moon main.cpp)
</code></pre>
<p>在当前目录下执行<code>cmake</code>：</p>
<pre><code class="language-shell">$ cmake `CMakeLists.txt`
</code></pre>
<p>此时目录下会生成Makefile文件（除此还有其他文件），继续执行make：</p>
<pre><code class="language-shell">$ make
</code></pre>
<p>可以得到构建好的可执行程序<code>moon</code>，运行<code>moon</code>，结果如下所示：</p>
<pre><code class="language-shell">$ ./moon
	hello world!
</code></pre>
<p>最开始，我们只创建了两个文件，一个是<code>main.cpp</code>，一个是<code>CMakeLists.txt</code>，但是通过执行cmake和make命令，除了生成可执行文件<code>moon</code>之外，可以看到目录下生成了好多其他文件：</p>
<pre><code class="language-shell">$ ls
	CMakeCache.txt          CMakeLists.txt          Makefile                main.cpp
	CMakeFiles              cmake_install.cmake     moon
</code></pre>
<p>当把所有文件放在同一个目录下时，项目会变得难以控制和管理。我们将当前目录还原一下，除了<code>main.cpp</code>和<code>CMakeLists.txt</code>两个文件，其余文件全部删除，然后创建<code>build</code>文件夹：</p>
<pre><code class="language-shell">$ rm -rf CMakeFiles CMakeCache.txt Makefile cmake_install.cmake moon
$ mkdir build
$ ls
	CMakeLists.txt  				build           main.cpp
</code></pre>
<p>进入build文件夹，使用cmake命令生成Makefile文件，注意，这里使用cmake时，<code>CMakeLists.txt</code>在上级目录，因此，需要在cmake后面使用 <code>..</code>表示使用上级目录。</p>
<pre><code class="language-shell">build $ cmake ..
</code></pre>
<p>此时生成的包括Makefile在内的文件都将在build目录下，继续在build目录下执行make，同样将在该目录下生成可执行的moon文件。此时整个工程目录结构是这样的：</p>
<pre><code class="language-shell">$ tree -L 3
.
├── CMakeLists.txt
├── build
│   ├── CMakeCache.txt
│   ├── CMakeFiles
│   │   ├── 3.28.3
│   │   ├── CMakeConfigureLog.yaml
│   │   ├── CMakeDirectoryInformation.cmake
│   │   ├── CMakeScratch
│   │   ├── Makefile.cmake
│   │   ├── Makefile2
│   │   ├── TargetDirectories.txt
│   │   ├── cmake.check_cache
│   │   ├── moon.dir
│   │   ├── pkgRedirects
│   │   └── progress.marks
│   ├── Makefile
│   ├── cmake_install.cmake
│   └── moon
└── main.cpp
</code></pre>
<p>可见所有由<code>cmake</code>和<code>make</code>命令生成的文件都在<code>build</code>目录下。</p>
]]></content>
    </entry>
</feed>